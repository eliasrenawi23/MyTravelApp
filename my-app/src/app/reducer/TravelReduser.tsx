import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../store';
import axios from 'axios';

interface travel{
  travelDateFrom: Date,
  travelDateTo: Date,
  travelDest :String,
  numberOfPeople:Number,
  travelPurpos:String[],
  Luggage:String[],
  Transport :String[],
  Activity:String[],
  Accommodation:String[],
  Spiceal:String[]

}

export interface Travels{
    TravelsInfo: {
      travels: Array<travel>;

  }
  status: 'idle' | 'loading' | 'failed';

}

const initialState: Travels = {
  TravelsInfo: {
      travels:[]
  },
  status: 'idle'
};
export const GetTravelAllInfoAsync = createAsyncThunk(
  'Travel/GetTravelAllInfoAsync',
  async (_, thunkAPI) => {
    try {
      const response = await axios.get('http://localhost:3001/travel/getAllTravelsData', { withCredentials: true });
      const data: any = response.data
      console.log("GetTravelInfoAsync data  from server 3001");
      console.log(data);
      if (!data.ok)
        return thunkAPI.rejectWithValue("failed");
      else return data;
    } catch (error: any) {
      //console.log(error);
      //thunkAPI.rejectWithValue("failed");
      thunkAPI.rejectWithValue(error.response.data)
    }

  }
);

export const TravelSlice = createSlice({
  name: 'Travellist',
  initialState,
  reducers: {
    updatelist :(state,action)=>{
      state.TravelsInfo=action.payload;
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(GetTravelAllInfoAsync.pending, (state, action) => {
        state.status = 'loading';
      })
      .addCase(GetTravelAllInfoAsync.fulfilled, (state, action) => {
        if(action.payload!=undefined){
          state.status = 'idle';
          state.TravelsInfo.travels = action.payload.travelList;
        }
      })
      .addCase(GetTravelAllInfoAsync.rejected, (state, action) => {
        state.status = 'failed';
        state = initialState;
      })
     

  },



});


// export const{login} =UserSlice.actions;
//export const { logout } = UserSlice.actions;
//export const{getGetTravelInfoAsync} =TravelSlice.caseReducers;
export const{updatelist} =TravelSlice.actions;

export const GetTravels= (state: RootState) => state.Travellist;
export default TravelSlice.reducer;
